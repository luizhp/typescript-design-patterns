★★★★★★★★★★★★★★★★★★★
★ Design Patterns ★
★★★★★★★★★★★★★★★★★★★

⚫ Creational Patterns

   These design patterns provide a way to create objects while hiding the creation logic,
   rather than instantiating objects directly using new operator.
   This gives program more flexibility in deciding which objects need to be created for a given use case.

   ➼ Abstract Factory

   ➼ Builder

   ➼ Factory Method
     Under some scenarios, a class cannot predict exactly what objects it will create, or its
     subclasses may want to create more specified versions of these objects.
     Then, the Factory Method Pattern can be applied.

   ➼ Prototype

   ➼ Singleton

   ➼ Factory


⚫ Structural Patterns

   These design patterns concern class and object composition.
   Concept of inheritance is used to compose interfaces and define ways to compose objects to obtain new functionalities.

   ➼ Adapter
     Allows to make different classes with different interfaces to work together without changing their source code.
     Convert the interface of a class into another interface clients expect.
     Adapter lets classes work together that couldn't otherwise because of incompatible interfaces.
     Also Known As Wrapper.

   ➼ Bridge

   ➼ Composite

   ➼ Decorator
     Decorator Pattern adds new functionality to an object dynamically, usually without compromising the original features.

   ➼ Façade
     Provide a unified interface to a set of interfaces in a subsystem.
     Façade defines a higher-level interface that makes the subsystem easier to use.

   ➼ Filter*

   ➼ Flyweight

   ➼ Proxy


⚫ Behavioral Patterns

   These design patterns are specifically concerned with communication between objects.

   ➼ Chain of Responsibility

   ➼ Command

   ➼ Interpreter

   ➼ Iterator

   ➼ Mediator

   ➼ Memento

   ➼ Observer

   ➼ State

   ➼ Strategy

   ➼ Template Method

   ➼ Visitor
